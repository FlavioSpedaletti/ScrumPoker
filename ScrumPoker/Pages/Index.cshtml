@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    var roomId = Request.Query["roomId"].ToString() ?? RouteData.Values["roomId"]?.ToString();
}

@section scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        let userName = localStorage.getItem("userName") || "";
        let roomCode = "";
        let possibleVotes = [];
        let isConnecting = false;
        
        // Tenta carregar o código da sala da URL ou do localStorage
        const urlRoomId = "@roomId";
        if (urlRoomId && urlRoomId.trim() !== "") {
            roomCode = urlRoomId.trim();
        } else {
            // Só use o localStorage se não houver roomId na URL
            const storedRoomCode = localStorage.getItem("roomCode");
            if (storedRoomCode && storedRoomCode.trim() !== "") {
                roomCode = storedRoomCode.trim();
            }
        }

        let url = `${window.location.origin}/pokerHub`;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl(url, {
                transport: signalR.HttpTransportType.WebSockets,
                withCredentials: false
            })
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect()
            .build();

        async function ensureConnected() {
            if (connection.state === signalR.HubConnectionState.Disconnected && !isConnecting) {
                isConnecting = true;
                try {
                    await connection.start();
                    console.log("Conectado ao servidor SignalR");
                    
                    possibleVotes = await connection.invoke("GetValidVotes");
                    console.log("Votos válidos recebidos do servidor:", possibleVotes);
                    
                    generateVoteButtons();
                } catch (err) {
                    console.error("Erro ao conectar:", err);
                    setTimeout(ensureConnected, 5000);
                } finally {
                    isConnecting = false;
                }
                return true;
            }
            return connection.state === signalR.HubConnectionState.Connected;
        }

        async function startConnection() {
            if (await ensureConnected()) {
                if (roomCode && roomCode.trim() !== "") {
                    if (userName && userName.trim() !== "") {
                        // Se temos usuário e sala, tenta entrar direto
                        joinRoom(roomCode, userName);
                    } else {
                        // Verificar se a sala existe antes de pedir o nome
                        const roomExists = await connection.invoke("RoomExists", roomCode);
                        if (roomExists) {
                            const name = prompt("Digite seu nome para entrar na sala:");
                            if (name && name.trim() !== "") {
                                joinRoom(roomCode, name);
                            } else {
                                // Usuário cancelou o prompt de nome, volta para a tela inicial
                                roomCode = "";
                                window.history.pushState({}, "", "/");
                            }
                        } else {
                            // Sala não existe
                            alert("Sala não encontrada. Verifique o código e tente novamente.");
                            roomCode = "";
                            localStorage.removeItem("roomCode");
                            window.history.pushState({}, "", "/");
                        }
                    }
                }
                // Se não temos código de sala, simplesmente mostra a tela inicial
            }
        }

        function generateVoteButtons() {
            const voteButtonsContainer = document.getElementById("voteButtonsContainer");
            voteButtonsContainer.innerHTML = "";
            
            for (const voteValue of possibleVotes) {
                const button = document.createElement("button");
                button.className = "btn btn-outline-primary";
                button.onclick = function() { vote(voteValue); };
                button.textContent = voteValue;
                voteButtonsContainer.appendChild(button);
                
                voteButtonsContainer.appendChild(document.createTextNode(" "));
            }
        }

        connection.onclose(async () => {
            console.warn("Conexão perdida. Tentando reconectar...");
            await ensureConnected();
        });

        startConnection();
        
        // Atualiza a exibição inicial do nome quando a página carrega
        updateInitialUserNameDisplay();

        function togglePointsInfo() {
            const pointsInfo = document.getElementById('pointsInfo');
            const chevronIcon = document.getElementById('pointsChevron');
            
            if (pointsInfo.style.display === 'none' || pointsInfo.style.display === '') {
                pointsInfo.style.display = 'block';
                chevronIcon.classList.remove('bi-chevron-down');
                chevronIcon.classList.add('bi-chevron-up');
            } else {
                pointsInfo.style.display = 'none';
                chevronIcon.classList.remove('bi-chevron-up');
                chevronIcon.classList.add('bi-chevron-down');
            }
        }

        async function createRoom() {
            if (!await ensureConnected()) {
                alert("Não foi possível conectar ao servidor. Tente novamente.");
                return;
            }
            
            const newRoomCode = await connection.invoke("CreateRoom");
            
            // Se já temos um userName salvo, usar diretamente
            if (userName && userName.trim() !== "") {
                joinRoom(newRoomCode, userName);
            } else {
                const name = prompt("Digite seu nome para entrar na sala:");
                if (name && name.trim() !== "") {
                    joinRoom(newRoomCode, name);
                }
            }
        }

        async function joinRoom(code, name) {
            if (!await ensureConnected()) {
                alert("Não foi possível conectar ao servidor. Tente novamente.");
                return;
            }

            if (!name || name.trim() === "") {
                name = prompt("Digite seu nome:");
                if (!name || name.trim() === "") return;
            }
            
            try {
                const success = await connection.invoke("JoinRoom", code, name);
                
                if (success) {
                    userName = name;
                    roomCode = code;
                    
                    localStorage.setItem("userName", userName);
                    localStorage.setItem("roomCode", roomCode);
                    
                    document.getElementById("roomScreen").style.display = "block";
                    document.getElementById("initialScreen").style.display = "none";
                    
                    document.getElementById("currentRoomCode").textContent = roomCode;
                    updateUserNameDisplay();
                    
                    window.history.pushState({}, "", `/room/${roomCode}`);
                }
            } catch (err) {
                console.error("Erro ao entrar na sala:", err);
            }
        }

        function leaveRoom() {
            if (userName && roomCode) {
                connection.invoke("LeaveRoom", roomCode, userName);
                
                localStorage.removeItem("roomCode");
                roomCode = "";
                
                document.getElementById("initialScreen").style.display = "block";
                document.getElementById("roomScreen").style.display = "none";
                
                // Atualiza a exibição do nome na tela inicial
                updateInitialUserNameDisplay();
                
                window.history.pushState({}, "", "/");
            }
        }

        async function changeUserName() {
            const currentName = userName || "";
            const newName = prompt("Digite seu novo nome:", currentName);
            
            if (newName && newName.trim() !== "" && newName.trim() !== currentName) {
                const oldUserName = userName;
                
                // Atualiza o nome do usuário no localStorage
                userName = newName.trim();
                localStorage.setItem("userName", userName);
                
                // Se estiver em uma sala, usa o método específico do Hub
                if (roomCode && oldUserName) {
                    try {
                        // Usa o método ChangeUserName do Hub
                        const success = await connection.invoke("ChangeUserName", roomCode, oldUserName, userName);
                        
                        if (success) {
                            updateUserNameDisplay();
                            console.log("Nome alterado com sucesso para:", userName);
                        } else {
                            // Se falhou, volta para o nome anterior
                            userName = oldUserName;
                            localStorage.setItem("userName", userName);
                            updateUserNameDisplay();
                            alert("Não foi possível alterar o nome. Tente novamente.");
                        }
                    } catch (err) {
                        console.error("Erro ao alterar nome:", err);
                        // Se falhou, volta para o nome anterior
                        userName = oldUserName;
                        localStorage.setItem("userName", userName);
                        updateUserNameDisplay();
                        alert("Erro ao alterar o nome. Tente novamente.");
                    }
                } else {
                    // Se não estiver em sala, apenas atualiza a interface
                    updateUserNameDisplay();
                    console.log("Nome alterado para:", userName);
                }
            }
        }

        function updateUserNameDisplay() {
            // Atualiza o nome na tela da sala (se existir o elemento)
            const roomUserName = document.getElementById("currentUserName");
            if (roomUserName && userName) {
                roomUserName.textContent = userName;
            }
            
            // Atualiza o nome na tela inicial
            updateInitialUserNameDisplay();
        }

        function updateInitialUserNameDisplay() {
            const userNameSection = document.getElementById("userNameSection");
            const initialUserName = document.getElementById("initialUserName");
            
            if (userName && userName.trim() !== "") {
                // Mostra a seção e atualiza o nome
                userNameSection.style.display = "block";
                initialUserName.textContent = userName;
            } else {
                // Oculta a seção se não há nome
                userNameSection.style.display = "none";
            }
        }

        function enterRoom() {
            const code = document.getElementById("roomCodeInput").value.trim().toUpperCase();
            if (code && code.trim() !== "") {
                verifyAndJoinRoom(code);
            } else {
                alert("Por favor, digite um código de sala válido.");
            }
        }
        
        async function verifyAndJoinRoom(code) {
            if (!await ensureConnected()) {
                alert("Não foi possível conectar ao servidor. Tente novamente.");
                return;
            }
            
            try {
                const roomExists = await connection.invoke("RoomExists", code);
                if (roomExists) {
                    // Se já temos um userName salvo, usar diretamente
                    if (userName && userName.trim() !== "") {
                        joinRoom(code, userName);
                    } else {
                        const name = prompt("Digite seu nome:");
                        if (name && name.trim() !== "") {
                            joinRoom(code, name);
                        }
                    }
                } else {
                    alert("Sala não encontrada. Verifique o código e tente novamente.");
                }
            } catch (err) {
                console.error("Erro ao verificar sala:", err);
                alert("Ocorreu um erro ao verificar a sala. Tente novamente.");
            }
        }

        function copyRoomLink() {
            const roomUrl = window.location.origin + "/room/" + roomCode;
            navigator.clipboard.writeText(roomUrl)
                .then(() => {
                    const copyTooltip = document.getElementById("copyTooltip");
                    copyTooltip.innerText = "Link copiado!";
                    setTimeout(() => {
                        copyTooltip.innerText = "Copiar Link";
                    }, 2000);
                })
                .catch(err => {
                    console.error("Erro ao copiar: ", err);
                    alert("Não foi possível copiar o link. Erro: " + err);
                });
        }

        function vote(value) {
            if (!userName || !roomCode) {
                alert("Você precisa estar em uma sala para votar!");
                return;
            }
            
            if (!possibleVotes.includes(value)) {
                alert("Valor de voto inválido!");
                return;
            }
            
            connection.invoke("SubmitVote", roomCode, userName, value).catch(err => console.error(err.toString()));
        }

        function revealVotes() {
            connection.invoke("RevealVotes", roomCode).catch(err => console.error(err.toString()));
        }

        function resetVotes() {
            connection.invoke("ResetVotes", roomCode).catch(err => console.error(err.toString()));
        }

        connection.on("UpdateUsers", users => {
            document.getElementById("users").innerText = users.join(", ");
        });

        connection.on("UpdateVotes", (votes) => {
            updateTable(votes, false);
        });

        connection.on("RevealVotes", votes => {
            updateTable(votes, true);
        });

        connection.on("RoomNotFound", () => {
            alert("Sala não encontrada. Verifique o código e tente novamente.");
            
            if (roomCode) {
                localStorage.removeItem("roomCode");
                roomCode = "";
            }
            
            document.getElementById("initialScreen").style.display = "block";
            document.getElementById("roomScreen").style.display = "none";
            
            window.history.pushState({}, "", "/");
        });

        function updateTable(votes, reveal) {
            const tbody = document.getElementById("votesTable");
            tbody.innerHTML = "";
            
            let usersArray = Object.keys(votes).map(user => ({
                name: user,
                vote: votes[user]
            }));
            
            if (reveal) {
                const voteValues = {};
                
                voteValues[''] = 9999;
                voteValues['?'] = 9998;
                voteValues['☕'] = 9997;
                
                possibleVotes.forEach(vote => {
                    if (!isNaN(parseFloat(vote))) {
                        voteValues[vote] = parseFloat(vote);
                    }
                });
                
                usersArray.sort((a, b) => {
                    let voteA = a.vote === null ? '' : a.vote;
                    let voteB = b.vote === null ? '' : b.vote;
                    
                    let valueA = voteValues[voteA];
                    let valueB = voteValues[voteB];
                    
                    if (valueA === undefined) valueA = 999;
                    if (valueB === undefined) valueB = 999;
                    
                    return valueA - valueB;
                });
            }
            
            usersArray.forEach(user => {
                const row = document.createElement("tr");
                const nameCell = document.createElement("td");
                nameCell.textContent = user.name;
                const voteCell = document.createElement("td");
                voteCell.textContent = reveal ? user.vote ?? "" : (user.vote ? (user.name == userName ? user.vote : "🙈") : "-");
                row.appendChild(nameCell);
                row.appendChild(voteCell);
                tbody.appendChild(row);
            });
        }
        
        // Adicionar event listener para a tecla Enter no campo de código da sala
        document.addEventListener("DOMContentLoaded", function() {
            const roomCodeInput = document.getElementById("roomCodeInput");
            roomCodeInput.addEventListener("keypress", function(event) {
                if (event.key === "Enter") {
                    event.preventDefault();
                    enterRoom();
                }
            });
            
        });
    </script>
}

<div id="initialScreen" class="container py-5">
    <h1 class="text-center mb-5">Scrum Poker</h1>
    
    <div class="row justify-content-center">
        <div class="col-md-6 text-center">
            <!-- Seção do Nome do Usuário -->
            <div id="userNameSection" class="card shadow p-3 mb-4" style="display: none;">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>Seu nome:</strong> <span id="initialUserName" class="badge bg-success"></span>
                    </div>
                    <button class="btn btn-sm btn-outline-primary" onclick="changeUserName()" title="Trocar nome de usuário">
                        <i class="bi bi-person-gear"></i> Alterar
                    </button>
                </div>
            </div>
            
            <!-- Card principal -->
            <div class="card shadow p-4 mb-5">
                <h2 class="mb-4">Bem-vindo ao Scrum Poker</h2>
                <button class="btn btn-primary btn-lg w-100 mb-4" onclick="createRoom()">Criar Sala</button>
                
                <div class="mt-4">
                    <h3 class="mb-3">Entrar em uma Sala Existente</h3>
                    <div class="input-group mb-3">
                        <input type="text" id="roomCodeInput" class="form-control" placeholder="Código da Sala" maxlength="5" style="text-transform: uppercase;">
                        <button class="btn btn-success" onclick="enterRoom()">Entrar na Sala</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="roomScreen" style="display: none;">
    <div class="container-fluid bg-light py-2 mb-4">
        <div class="container">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <div class="me-2">
                        <strong>Sala:</strong> <span id="currentRoomCode" class="badge bg-primary"></span>
                    </div>
                    <button class="btn btn-sm btn-outline-secondary" onclick="copyRoomLink()" title="Copiar link da sala">
                        <i class="bi bi-clipboard"></i> <span id="copyTooltip">Copiar Link</span>
                    </button>
                </div>
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <strong>Logado como:</strong> <span id="currentUserName" class="badge bg-success"></span>
                    </div>
                    <button class="btn btn-sm btn-outline-primary me-2" onclick="changeUserName()" title="Trocar nome de usuário">
                        <i class="bi bi-person-gear"></i> Trocar Nome
                    </button>
                    <button class="btn btn-sm btn-outline-danger" onclick="leaveRoom()">Sair da Sala</button>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <h1 class="text-center mb-4">Scrum Poker</h1>
        <p class="text-center">Usuários: <span id="users" class="fw-bold"></span></p>
        <h2 class="text-center">Escolha uma nota:</h2>
        
        <!-- Painel informativo sobre as pontuações -->
        <div class="card mb-3 mx-auto" style="max-width: 800px;">
            <div class="card-header bg-info text-white py-2">
                <button class="btn btn-link text-white text-decoration-none p-0 w-100 text-start d-flex justify-content-between align-items-center" 
                        type="button" onclick="togglePointsInfo()">
                    <span><i class="bi bi-info-circle me-2"></i>Guia de Pontuação</span>
                    <i id="pointsChevron" class="bi bi-chevron-down"></i>
                </button>
            </div>
            <div id="pointsInfo" style="display: none;">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-md-6">
                            <table class="table table-sm table-borderless mb-0">
                                <tbody>
                                    <tr>
                                        <td class="fw-bold text-center" style="width: 50px;">0</td>
                                        <td>Tarefa trivial, esforço quase inexistente.</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold text-center">1</td>
                                        <td>Tarefa muito pequena, trivial para implementar.</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold text-center">2</td>
                                        <td>Tarefa pequena, mas exige atenção.</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold text-center">3</td>
                                        <td>Tarefa média, já precisa de planejamento e alguns dias de trabalho.</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold text-center">5</td>
                                        <td>Tarefa intermediária, envolve esforço considerável.</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <table class="table table-sm table-borderless mb-0">
                                <tbody>
                                    <tr>
                                        <td class="fw-bold text-center" style="width: 50px;">8</td>
                                        <td>Tarefa complexa, com várias dependências ou riscos.</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold text-center">13</td>
                                        <td>Tarefa grande, pode ser necessário dividir em partes.</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold text-center">20+</td>
                                        <td>Necessário dividir em partes menores.</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold text-center">?</td>
                                        <td>Incerteza sobre o escopo ou complexidade.</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold text-center">☕</td>
                                        <td>Preciso de uma pausa para pensar melhor.</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div id="voteButtonsContainer" class="d-flex justify-content-center flex-wrap gap-2 mb-4">
        </div>
        <h2 class="text-center">Votos</h2>
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Usuário</th>
                        <th>Nota</th>
                    </tr>
                </thead>
                <tbody id="votesTable"></tbody>
            </table>
        </div>
        <div class="text-center mt-3">
            <button class="btn btn-success" onclick="revealVotes()">Revelar Notas</button>
            <button class="btn btn-warning" onclick="resetVotes()">Zerar Votos</button>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
