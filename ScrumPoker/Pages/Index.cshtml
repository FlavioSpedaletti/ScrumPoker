@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

@section scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        let userName = localStorage.getItem("userName") || "";

        //let url = "https://91ae-136-226-62-112.ngrok-free.app/pokerHub";
        let url = `${window.location.origin}/pokerHub`;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl(url, {
                transport: signalR.HttpTransportType.WebSockets,
                withCredentials: false
            })
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect()
            .build();

        async function startConnection() {
            try {
                await connection.start();
                console.log("Conectado ao servidor SignalR");
                if (userName) {
                    await connection.invoke("LeaveGame", userName).catch(err => console.error(err.toString()));
                    joinGame(userName);
                }
            } catch (err) {
                console.error("Erro ao conectar, tentando novamente em 5 segundos...", err);
                setTimeout(startConnection, 5000);
            }
        }

        connection.onclose(async () => {
            console.warn("Conexão perdida. Tentando reconectar...");
            await startConnection();
        });

        startConnection();

        function joinGame(name) {
            userName = name;
            localStorage.setItem("userName", userName);
            connection.invoke("JoinGame", userName).catch(err => console.error(err.toString()));
            document.getElementById("enterButton").style.display = "none";
            document.getElementById("exitButton").style.display = "inline-block";
        }

        function enterSystem() {
            const name = prompt("Digite seu nome:");
            if (name) {
                if (userName) {
                    connection.invoke("LeaveGame", userName).catch(err => console.error(err.toString()));
                }
                joinGame(name);
            }
        }

        function exitSystem() {
            if (userName) {
                connection.invoke("LeaveGame", userName).catch(err => console.error(err.toString()));
                localStorage.removeItem("userName");
                userName = "";
                document.getElementById("enterButton").style.display = "inline-block";
                document.getElementById("exitButton").style.display = "none";
            }
        }

        function vote(value) {
            if (!userName) {
                alert("Você precisa entrar no sistema primeiro.");
                return;
            }
            connection.invoke("SubmitVote", userName, value).catch(err => console.error(err.toString()));
        }

        function revealVotes() {
            connection.invoke("RevealVotes").catch(err => console.error(err.toString()));
        }

        function resetVotes() {
            connection.invoke("ResetVotes").catch(err => console.error(err.toString()));
        }

        connection.on("UpdateUsers", users => {
            document.getElementById("users").innerText = users.join(", ");
        });

        connection.on("UpdateVotes", (votes) => {
            updateTable(votes, false);
        });

        connection.on("RevealVotes", votes => {
            updateTable(votes, true);
        });

        function updateTable(votes, reveal) {
            const tbody = document.getElementById("votesTable");
            tbody.innerHTML = "";
            for (const user in votes) {
                const row = document.createElement("tr");
                const nameCell = document.createElement("td");
                nameCell.textContent = user;
                const voteCell = document.createElement("td");
                voteCell.textContent = reveal ? votes[user] ?? "" : (votes[user] ? (user == userName ? votes[user] : "🙈") : "-");
                row.appendChild(nameCell);
                row.appendChild(voteCell);
                tbody.appendChild(row);
            }
        }
    </script>

}

<h1 class="text-center mb-4">Scrum Poker</h1>
<div class="text-center mb-3">
    <button id="enterButton" class="btn btn-primary" onclick="enterSystem()">Entrar no Sistema</button>
    <button id="exitButton" class="btn btn-danger" onclick="exitSystem()" style="display: none;">Sair do Sistema</button>
</div>
<p class="text-center">Usuários: <span id="users" class="fw-bold"></span></p>
<h2 class="text-center">Escolha uma nota:</h2>
<div class="d-flex justify-content-center flex-wrap gap-2 mb-4">
    <script>
        const possibleVotes = ['☕', '?', '0', '0.5', '1', '2', '3', '5', '8', '13', '20', '40', '100'];
        for (const vote of possibleVotes) {
            document.write(`<button class="btn btn-outline-primary" onclick="vote('${vote}')">${vote}</button> `);
        }
    </script>
</div>
<h2 class="text-center">Votos</h2>
<div class="table-responsive">
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Usuário</th>
                <th>Nota</th>
            </tr>
        </thead>
        <tbody id="votesTable"></tbody>
    </table>
</div>
<div class="text-center mt-3">
    <button class="btn btn-success" onclick="revealVotes()">Revelar Notas</button>
    <button class="btn btn-warning" onclick="resetVotes()">Zerar Votos</button>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
